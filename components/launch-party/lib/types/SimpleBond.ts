/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SimpleBondInterface extends utils.Interface {
  functions: {
    "bond(address,uint256)": FunctionFragment;
    "bonds(address,uint256)": FunctionFragment;
    "bondsCount(address)": FunctionFragment;
    "claim()": FunctionFragment;
    "claimBond(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardsBondOf(address,uint256)": FunctionFragment;
    "rewardsOf(address)": FunctionFragment;
    "rewardsRatio(address)": FunctionFragment;
    "setRewards(address,uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "setVestingBlocks(uint256)": FunctionFragment;
    "tokenRewards()": FunctionFragment;
    "totalClaimedRewards()": FunctionFragment;
    "totalRewards()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "unpause()": FunctionFragment;
    "vestingBlocks()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bond",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bonds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bondsCount", values: [string]): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimBond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsBondOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rewardsOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewardsRatio",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setVestingBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vestingBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bonds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bondsCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimBond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsBondOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardsOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestingBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LogBond(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "LogClaim(address,uint256,uint256)": EventFragment;
    "LogSetRewards(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogBond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type LogBondEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    addr: string;
    token: string;
    amount: BigNumber;
    rewards: BigNumber;
    block: BigNumber;
    bondId: BigNumber;
  }
>;

export type LogBondEventFilter = TypedEventFilter<LogBondEvent>;

export type LogClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { addr: string; index: BigNumber; rewards: BigNumber }
>;

export type LogClaimEventFilter = TypedEventFilter<LogClaimEvent>;

export type LogSetRewardsEvent = TypedEvent<
  [string, BigNumber],
  { token: string; rewardsRatio: BigNumber }
>;

export type LogSetRewardsEventFilter = TypedEventFilter<LogSetRewardsEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface SimpleBond extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleBondInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bond(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bonds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        amount: BigNumber;
        rewards: BigNumber;
        claimed: BigNumber;
        block: BigNumber;
      }
    >;

    bondsCount(addr: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimBond(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardsBondOf(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rewards: BigNumber;
        rewardsClaimed: BigNumber;
        rewardsClaimable: BigNumber;
      }
    >;

    rewardsOf(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rewards: BigNumber;
        rewardsClaimed: BigNumber;
        rewardsClaimable: BigNumber;
      }
    >;

    rewardsRatio(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    setRewards(
      token: string,
      tokenRewardsRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      treasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVestingBlocks(
      vestingBlocks_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenRewards(overrides?: CallOverrides): Promise<[string]>;

    totalClaimedRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vestingBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bond(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bonds(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      token: string;
      amount: BigNumber;
      rewards: BigNumber;
      claimed: BigNumber;
      block: BigNumber;
    }
  >;

  bondsCount(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimBond(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardsBondOf(
    addr: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      rewards: BigNumber;
      rewardsClaimed: BigNumber;
      rewardsClaimable: BigNumber;
    }
  >;

  rewardsOf(
    addr: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      rewards: BigNumber;
      rewardsClaimed: BigNumber;
      rewardsClaimable: BigNumber;
    }
  >;

  rewardsRatio(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  setRewards(
    token: string,
    tokenRewardsRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    treasury_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVestingBlocks(
    vestingBlocks_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenRewards(overrides?: CallOverrides): Promise<string>;

  totalClaimedRewards(overrides?: CallOverrides): Promise<BigNumber>;

  totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vestingBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bond(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bonds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        amount: BigNumber;
        rewards: BigNumber;
        claimed: BigNumber;
        block: BigNumber;
      }
    >;

    bondsCount(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<BigNumber>;

    claimBond(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardsBondOf(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rewards: BigNumber;
        rewardsClaimed: BigNumber;
        rewardsClaimable: BigNumber;
      }
    >;

    rewardsOf(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rewards: BigNumber;
        rewardsClaimed: BigNumber;
        rewardsClaimable: BigNumber;
      }
    >;

    rewardsRatio(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setRewards(
      token: string,
      tokenRewardsRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(treasury_: string, overrides?: CallOverrides): Promise<void>;

    setVestingBlocks(
      vestingBlocks_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenRewards(overrides?: CallOverrides): Promise<string>;

    totalClaimedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    vestingBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogBond(address,address,uint256,uint256,uint256,uint256)"(
      addr?: null,
      token?: null,
      amount?: null,
      rewards?: null,
      block?: null,
      bondId?: null
    ): LogBondEventFilter;
    LogBond(
      addr?: null,
      token?: null,
      amount?: null,
      rewards?: null,
      block?: null,
      bondId?: null
    ): LogBondEventFilter;

    "LogClaim(address,uint256,uint256)"(
      addr?: null,
      index?: null,
      rewards?: null
    ): LogClaimEventFilter;
    LogClaim(addr?: null, index?: null, rewards?: null): LogClaimEventFilter;

    "LogSetRewards(address,uint256)"(
      token?: null,
      rewardsRatio?: null
    ): LogSetRewardsEventFilter;
    LogSetRewards(token?: null, rewardsRatio?: null): LogSetRewardsEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    bond(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bonds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondsCount(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimBond(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardsBondOf(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsOf(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardsRatio(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setRewards(
      token: string,
      tokenRewardsRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      treasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVestingBlocks(
      vestingBlocks_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vestingBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bond(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bonds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondsCount(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimBond(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardsBondOf(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsOf(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsRatio(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRewards(
      token: string,
      tokenRewardsRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      treasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVestingBlocks(
      vestingBlocks_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimedRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vestingBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
