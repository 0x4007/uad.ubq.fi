name: Test deploy

on:
  push:
  pull_request:

jobs:
  deploy:
    name: Test deploy
    runs-on: ubuntu-22.04
    env:
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18.14.1"

      - name: Install dependencies
        run: sudo apt -y update && sudo apt -y install libusb-1.0-0-dev libudev-dev

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly-87bc53fc6c874bd4c92d97ed180b949e3a36d78c

      - name: Yarn Install
        run: yarn install --mode=skip-build && yarn allow-scripts

      - name: Set Environment Variables
        env:
          INFURA_ID: ${{ secrets.INFURA_ID }}
          API_KEY_ALCHEMY: ${{ secrets.API_KEY_ALCHEMY }}
        run: |
          echo "INFURA_ID=$INFURA_ID" > ./packages/dapp/.env
          echo "API_KEY_ALCHEMY=$API_KEY_ALCHEMY" >> ./packages/dapp/.env

      - name: Setup Forge
        run: yarn workspace @ubiquity/contracts forge:install

      - name: Build All
        run: yarn build

      - name: Test All
        run: yarn test:all

      - name: Prepare Deployment Artifact
        env:
          EVENT_NAME: ${{github.event_name}}
          PR_NUMBER: ${{ github.event.number }}
          SHA: ${{github.sha}}
        run: |
          echo "event_name=$EVENT_NAME,pr_number=$PR_NUMBER,sha=$SHA"
          mkdir -p ./pr
          echo "event_name=$EVENT_NAME,pr_number=$PR_NUMBER,sha=$SHA," > ./pr/pr_number
          cd ./packages/dapp && zip -r pull-request.zip ./dist && cp pull-request.zip ../../pr
      - uses: actions/upload-artifact@v3
        with:
          name: pr
          path: pr/

      - name: Run Server
        run: yarn dev:dapp &
        env:
          CI: true

      - name: "Download Artifact"
        uses: actions/github-script@v6.3.3
        with:
          script: |
            const fs = require("fs");
            const download_artifact = require('${{ github.workspace }}/utils/download_artifact.js');
            const workflow_run_id = '${{ github.event.workflow_run.id }}';
            const workspace = '${{ github.workspace }}';
            download_artifact({github, context, fs, workflow_run_id, workspace})

      - name: Extract Artifact
        run: unzip pr.zip && unzip pull-request.zip && ls

      - name: Deploy Netlify
        run: |
          netlify link --id ${{ secrets.NETLIFY_SITE_ID_DEVELOPMENT }}
          netlify deploy --dir=./dist --prod > ./deployments.log
          ls -la

      - name: Deploy Cloudflare
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          REPOSITORY: ${{ github.repository }}
          PRODUCTION_BRANCH: "development"
          OUTPUT_DIRECTORY: "dist"
        run: |
          IFS='/' read -ra fields <<< "$REPOSITORY"
          projectName="${fields[1]}"
          echo $projectName
          wrangler pages project list > project_list.txt
          if grep -q $projectName project_list.txt; then
            echo "Project found"
          else
            echo "Project not found"
            wrangler pages project create "$projectName" --production-branch "$PRODUCTION_BRANCH"
          fi
          wrangler pages publish "$OUTPUT_DIRECTORY" --project-name "$projectName"

      # - name: Deploy Railway
      #   run: |
      #     cd dist
      #     npm i -g @railway/cli
      #     RAILWAY_TOKEN=${{ secrets.RAILWAY_API_TOKEN }} railway link ${{ secrets.RAILWAY_PROJECT_ID }}
      #     RAILWAY_TOKEN=${{ secrets.RAILWAY_API_TOKEN }} railway up

      - name: Get UbiquiBot Token
        uses: tibdex/github-app-token@v1.7.0
        id: get_installation_token
        with:
          app_id: ${{ secrets.UBIQUITY_BOUNTY_BOT_APP_ID }}
          private_key: ${{ secrets.UBIQUITY_BOUNTY_BOT_PRIVATE_KEY }}

      - name: Save UbiquiBot Token
        env:
          TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          echo "The generated token is masked: ${TOKEN}"

      - name: Deploy Comment as UbiquiBot
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.get_installation_token.outputs.token }}
          script: |
            const fs = require("fs");
            const print_deployments_log = require('${{ github.workspace }}/utils/print_deployments_logs.js');
            await print_deployments_log({github, context, fs});