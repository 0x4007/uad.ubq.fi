/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BondingFormulasInterface extends ethers.utils.Interface {
  functions: {
    "ONE()": FunctionFragment;
    "correctedAmountToWithdraw(uint256,uint256,uint256)": FunctionFragment;
    "lpRewardsAddLiquidityNormalization(tuple,uint256[2],uint256)": FunctionFragment;
    "lpRewardsRemoveLiquidityNormalization(tuple,uint256[2],uint256)": FunctionFragment;
    "sharesForLP(tuple,uint256[2],uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "correctedAmountToWithdraw",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lpRewardsAddLiquidityNormalization",
    values: [
      {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      [BigNumberish, BigNumberish],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lpRewardsRemoveLiquidityNormalization",
    values: [
      {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      [BigNumberish, BigNumberish],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sharesForLP",
    values: [
      {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      [BigNumberish, BigNumberish],
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "correctedAmountToWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpRewardsAddLiquidityNormalization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpRewardsRemoveLiquidityNormalization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharesForLP",
    data: BytesLike
  ): Result;

  events: {};
}

export class BondingFormulas extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BondingFormulasInterface;

  functions: {
    ONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ONE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    correctedAmountToWithdraw(
      _totalLpDeposited: BigNumberish,
      _bondingLpBalance: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "correctedAmountToWithdraw(uint256,uint256,uint256)"(
      _totalLpDeposited: BigNumberish,
      _bondingLpBalance: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lpRewardsAddLiquidityNormalization(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lpRewardsAddLiquidityNormalization((address,uint256,uint256,uint256,uint256,uint256),uint256[2],uint256)"(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lpRewardsRemoveLiquidityNormalization(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lpRewardsRemoveLiquidityNormalization((address,uint256,uint256,uint256,uint256,uint256),uint256[2],uint256)"(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sharesForLP(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _uLP: BigNumber }>;

    "sharesForLP((address,uint256,uint256,uint256,uint256,uint256),uint256[2],uint256)"(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _uLP: BigNumber }>;
  };

  ONE(overrides?: CallOverrides): Promise<BigNumber>;

  "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

  correctedAmountToWithdraw(
    _totalLpDeposited: BigNumberish,
    _bondingLpBalance: BigNumberish,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "correctedAmountToWithdraw(uint256,uint256,uint256)"(
    _totalLpDeposited: BigNumberish,
    _bondingLpBalance: BigNumberish,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lpRewardsAddLiquidityNormalization(
    _bond: {
      minter: string;
      lpFirstDeposited: BigNumberish;
      creationBlock: BigNumberish;
      lpRewardDebt: BigNumberish;
      endBlock: BigNumberish;
      lpAmount: BigNumberish;
    },
    _shareInfo: [BigNumberish, BigNumberish],
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lpRewardsAddLiquidityNormalization((address,uint256,uint256,uint256,uint256,uint256),uint256[2],uint256)"(
    _bond: {
      minter: string;
      lpFirstDeposited: BigNumberish;
      creationBlock: BigNumberish;
      lpRewardDebt: BigNumberish;
      endBlock: BigNumberish;
      lpAmount: BigNumberish;
    },
    _shareInfo: [BigNumberish, BigNumberish],
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lpRewardsRemoveLiquidityNormalization(
    _bond: {
      minter: string;
      lpFirstDeposited: BigNumberish;
      creationBlock: BigNumberish;
      lpRewardDebt: BigNumberish;
      endBlock: BigNumberish;
      lpAmount: BigNumberish;
    },
    _shareInfo: [BigNumberish, BigNumberish],
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lpRewardsRemoveLiquidityNormalization((address,uint256,uint256,uint256,uint256,uint256),uint256[2],uint256)"(
    _bond: {
      minter: string;
      lpFirstDeposited: BigNumberish;
      creationBlock: BigNumberish;
      lpRewardDebt: BigNumberish;
      endBlock: BigNumberish;
      lpAmount: BigNumberish;
    },
    _shareInfo: [BigNumberish, BigNumberish],
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sharesForLP(
    _bond: {
      minter: string;
      lpFirstDeposited: BigNumberish;
      creationBlock: BigNumberish;
      lpRewardDebt: BigNumberish;
      endBlock: BigNumberish;
      lpAmount: BigNumberish;
    },
    _shareInfo: [BigNumberish, BigNumberish],
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "sharesForLP((address,uint256,uint256,uint256,uint256,uint256),uint256[2],uint256)"(
    _bond: {
      minter: string;
      lpFirstDeposited: BigNumberish;
      creationBlock: BigNumberish;
      lpRewardDebt: BigNumberish;
      endBlock: BigNumberish;
      lpAmount: BigNumberish;
    },
    _shareInfo: [BigNumberish, BigNumberish],
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    correctedAmountToWithdraw(
      _totalLpDeposited: BigNumberish,
      _bondingLpBalance: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "correctedAmountToWithdraw(uint256,uint256,uint256)"(
      _totalLpDeposited: BigNumberish,
      _bondingLpBalance: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpRewardsAddLiquidityNormalization(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lpRewardsAddLiquidityNormalization((address,uint256,uint256,uint256,uint256,uint256),uint256[2],uint256)"(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpRewardsRemoveLiquidityNormalization(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lpRewardsRemoveLiquidityNormalization((address,uint256,uint256,uint256,uint256,uint256),uint256[2],uint256)"(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sharesForLP(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sharesForLP((address,uint256,uint256,uint256,uint256,uint256),uint256[2],uint256)"(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    correctedAmountToWithdraw(
      _totalLpDeposited: BigNumberish,
      _bondingLpBalance: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "correctedAmountToWithdraw(uint256,uint256,uint256)"(
      _totalLpDeposited: BigNumberish,
      _bondingLpBalance: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpRewardsAddLiquidityNormalization(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lpRewardsAddLiquidityNormalization((address,uint256,uint256,uint256,uint256,uint256),uint256[2],uint256)"(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpRewardsRemoveLiquidityNormalization(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lpRewardsRemoveLiquidityNormalization((address,uint256,uint256,uint256,uint256,uint256),uint256[2],uint256)"(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sharesForLP(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sharesForLP((address,uint256,uint256,uint256,uint256,uint256),uint256[2],uint256)"(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ONE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    correctedAmountToWithdraw(
      _totalLpDeposited: BigNumberish,
      _bondingLpBalance: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "correctedAmountToWithdraw(uint256,uint256,uint256)"(
      _totalLpDeposited: BigNumberish,
      _bondingLpBalance: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpRewardsAddLiquidityNormalization(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lpRewardsAddLiquidityNormalization((address,uint256,uint256,uint256,uint256,uint256),uint256[2],uint256)"(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpRewardsRemoveLiquidityNormalization(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lpRewardsRemoveLiquidityNormalization((address,uint256,uint256,uint256,uint256,uint256),uint256[2],uint256)"(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sharesForLP(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sharesForLP((address,uint256,uint256,uint256,uint256,uint256),uint256[2],uint256)"(
      _bond: {
        minter: string;
        lpFirstDeposited: BigNumberish;
        creationBlock: BigNumberish;
        lpRewardDebt: BigNumberish;
        endBlock: BigNumberish;
        lpAmount: BigNumberish;
      },
      _shareInfo: [BigNumberish, BigNumberish],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
