/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BondingV2Interface extends ethers.utils.Interface {
  functions: {
    "ETH_ADDRESS()": FunctionFragment;
    "ONE()": FunctionFragment;
    "accLpRewardPerShare()": FunctionFragment;
    "addLiquidity(uint256,uint256,uint256)": FunctionFragment;
    "addProtocolToken(address)": FunctionFragment;
    "addUserToMigrate(address,uint256,uint256)": FunctionFragment;
    "blockCountInAWeek()": FunctionFragment;
    "bondingDiscountMultiplier()": FunctionFragment;
    "bondingFormulasAddress()": FunctionFragment;
    "crvPriceReset(uint256)": FunctionFragment;
    "currentShareValue()": FunctionFragment;
    "data()": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "lpRewardForShares(uint256,uint256)": FunctionFragment;
    "lpRewards()": FunctionFragment;
    "manager()": FunctionFragment;
    "migrate()": FunctionFragment;
    "migrating()": FunctionFragment;
    "migrator()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingLpRewards(uint256)": FunctionFragment;
    "removeLiquidity(uint256,uint256)": FunctionFragment;
    "removeProtocolToken(address)": FunctionFragment;
    "sendDust(address,address,uint256)": FunctionFragment;
    "setBlockCountInAWeek(uint256)": FunctionFragment;
    "setBondingDiscountMultiplier(uint256)": FunctionFragment;
    "setBondingFormulasAddress(address)": FunctionFragment;
    "setMigrating(bool)": FunctionFragment;
    "setMigrator(address)": FunctionFragment;
    "toMigrateId(address)": FunctionFragment;
    "totalLpToMigrate()": FunctionFragment;
    "uADPriceReset(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accLpRewardPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addProtocolToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addUserToMigrate",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blockCountInAWeek",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondingDiscountMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondingFormulasAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crvPriceReset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentShareValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lpRewardForShares",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lpRewards", values?: undefined): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(functionFragment: "migrate", values?: undefined): string;
  encodeFunctionData(functionFragment: "migrating", values?: undefined): string;
  encodeFunctionData(functionFragment: "migrator", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingLpRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProtocolToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendDust",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockCountInAWeek",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondingDiscountMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondingFormulasAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMigrating",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setMigrator", values: [string]): string;
  encodeFunctionData(functionFragment: "toMigrateId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalLpToMigrate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uADPriceReset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accLpRewardPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProtocolToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUserToMigrate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockCountInAWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingDiscountMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingFormulasAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crvPriceReset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentShareValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lpRewardForShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrating", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingLpRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProtocolToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendDust", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBlockCountInAWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondingDiscountMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondingFormulasAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMigrating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toMigrateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLpToMigrate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uADPriceReset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "AddLiquidityFromBond(address,uint256,uint256,uint256)": EventFragment;
    "BlockCountInAWeekUpdated(uint256)": EventFragment;
    "BondingDiscountMultiplierUpdated(uint256)": EventFragment;
    "Deposit(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "DustSent(address,address,uint256)": EventFragment;
    "Migrated(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "PriceReset(address,uint256,uint256)": EventFragment;
    "ProtocolTokenAdded(address)": EventFragment;
    "ProtocolTokenRemoved(address)": EventFragment;
    "RemoveLiquidityFromBond(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidityFromBond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockCountInAWeekUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BondingDiscountMultiplierUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DustSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Migrated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceReset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolTokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolTokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidityFromBond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class BondingV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BondingV2Interface;

  functions: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    "ETH_ADDRESS()"(overrides?: CallOverrides): Promise<[string]>;

    ONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ONE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    accLpRewardPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    "accLpRewardPerShare()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addLiquidity(
      _amount: BigNumberish,
      _id: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addLiquidity(uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _id: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addProtocolToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addProtocolToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addUserToMigrate(
      _original: string,
      _lpBalance: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addUserToMigrate(address,uint256,uint256)"(
      _original: string,
      _lpBalance: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blockCountInAWeek(overrides?: CallOverrides): Promise<[BigNumber]>;

    "blockCountInAWeek()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    bondingDiscountMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "bondingDiscountMultiplier()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bondingFormulasAddress(overrides?: CallOverrides): Promise<[string]>;

    "bondingFormulasAddress()"(overrides?: CallOverrides): Promise<[string]>;

    crvPriceReset(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "crvPriceReset(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentShareValue(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { priceShare: BigNumber }>;

    "currentShareValue()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { priceShare: BigNumber }>;

    data(overrides?: CallOverrides): Promise<[string]>;

    "data()"(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _lpsAmount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256)"(
      _lpsAmount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lpRewardForShares(
      amount: BigNumberish,
      lpRewardDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pendingLpReward: BigNumber }>;

    "lpRewardForShares(uint256,uint256)"(
      amount: BigNumberish,
      lpRewardDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pendingLpReward: BigNumber }>;

    lpRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lpRewards()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    "manager()"(overrides?: CallOverrides): Promise<[string]>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "migrate()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrating(overrides?: CallOverrides): Promise<[boolean]>;

    "migrating()"(overrides?: CallOverrides): Promise<[boolean]>;

    migrator(overrides?: CallOverrides): Promise<[string]>;

    "migrator()"(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    pendingLpRewards(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingLpRewards(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeLiquidity(
      _amount: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeLiquidity(uint256,uint256)"(
      _amount: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeProtocolToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeProtocolToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sendDust(address,address,uint256)"(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBlockCountInAWeek(
      _blockCountInAWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBlockCountInAWeek(uint256)"(
      _blockCountInAWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBondingDiscountMultiplier(
      _bondingDiscountMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBondingDiscountMultiplier(uint256)"(
      _bondingDiscountMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBondingFormulasAddress(
      _bondingFormulasAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBondingFormulasAddress(address)"(
      _bondingFormulasAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMigrating(
      _migrating: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMigrating(bool)"(
      _migrating: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMigrator(
      _migrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMigrator(address)"(
      _migrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toMigrateId(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "toMigrateId(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalLpToMigrate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalLpToMigrate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    uADPriceReset(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "uADPriceReset(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

  "ETH_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

  ONE(overrides?: CallOverrides): Promise<BigNumber>;

  "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

  accLpRewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  "accLpRewardPerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  addLiquidity(
    _amount: BigNumberish,
    _id: BigNumberish,
    _weeks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addLiquidity(uint256,uint256,uint256)"(
    _amount: BigNumberish,
    _id: BigNumberish,
    _weeks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addProtocolToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addProtocolToken(address)"(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addUserToMigrate(
    _original: string,
    _lpBalance: BigNumberish,
    _weeks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addUserToMigrate(address,uint256,uint256)"(
    _original: string,
    _lpBalance: BigNumberish,
    _weeks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blockCountInAWeek(overrides?: CallOverrides): Promise<BigNumber>;

  "blockCountInAWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

  bondingDiscountMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "bondingDiscountMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  bondingFormulasAddress(overrides?: CallOverrides): Promise<string>;

  "bondingFormulasAddress()"(overrides?: CallOverrides): Promise<string>;

  crvPriceReset(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "crvPriceReset(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentShareValue(overrides?: CallOverrides): Promise<BigNumber>;

  "currentShareValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  data(overrides?: CallOverrides): Promise<string>;

  "data()"(overrides?: CallOverrides): Promise<string>;

  deposit(
    _lpsAmount: BigNumberish,
    _weeks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256)"(
    _lpsAmount: BigNumberish,
    _weeks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lpRewardForShares(
    amount: BigNumberish,
    lpRewardDebt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lpRewardForShares(uint256,uint256)"(
    amount: BigNumberish,
    lpRewardDebt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lpRewards(overrides?: CallOverrides): Promise<BigNumber>;

  "lpRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

  manager(overrides?: CallOverrides): Promise<string>;

  "manager()"(overrides?: CallOverrides): Promise<string>;

  migrate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "migrate()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrating(overrides?: CallOverrides): Promise<boolean>;

  "migrating()"(overrides?: CallOverrides): Promise<boolean>;

  migrator(overrides?: CallOverrides): Promise<string>;

  "migrator()"(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pendingLpRewards(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingLpRewards(uint256)"(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeLiquidity(
    _amount: BigNumberish,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeLiquidity(uint256,uint256)"(
    _amount: BigNumberish,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeProtocolToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeProtocolToken(address)"(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendDust(
    _to: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sendDust(address,address,uint256)"(
    _to: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBlockCountInAWeek(
    _blockCountInAWeek: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBlockCountInAWeek(uint256)"(
    _blockCountInAWeek: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBondingDiscountMultiplier(
    _bondingDiscountMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBondingDiscountMultiplier(uint256)"(
    _bondingDiscountMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBondingFormulasAddress(
    _bondingFormulasAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBondingFormulasAddress(address)"(
    _bondingFormulasAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMigrating(
    _migrating: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMigrating(bool)"(
    _migrating: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMigrator(
    _migrator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMigrator(address)"(
    _migrator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toMigrateId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "toMigrateId(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalLpToMigrate(overrides?: CallOverrides): Promise<BigNumber>;

  "totalLpToMigrate()"(overrides?: CallOverrides): Promise<BigNumber>;

  uADPriceReset(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "uADPriceReset(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unpause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

    "ETH_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    accLpRewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    "accLpRewardPerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      _amount: BigNumberish,
      _id: BigNumberish,
      _weeks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidity(uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _id: BigNumberish,
      _weeks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addProtocolToken(_token: string, overrides?: CallOverrides): Promise<void>;

    "addProtocolToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addUserToMigrate(
      _original: string,
      _lpBalance: BigNumberish,
      _weeks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addUserToMigrate(address,uint256,uint256)"(
      _original: string,
      _lpBalance: BigNumberish,
      _weeks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    blockCountInAWeek(overrides?: CallOverrides): Promise<BigNumber>;

    "blockCountInAWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

    bondingDiscountMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "bondingDiscountMultiplier()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondingFormulasAddress(overrides?: CallOverrides): Promise<string>;

    "bondingFormulasAddress()"(overrides?: CallOverrides): Promise<string>;

    crvPriceReset(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "crvPriceReset(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentShareValue(overrides?: CallOverrides): Promise<BigNumber>;

    "currentShareValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    data(overrides?: CallOverrides): Promise<string>;

    "data()"(overrides?: CallOverrides): Promise<string>;

    deposit(
      _lpsAmount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      _lpsAmount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpRewardForShares(
      amount: BigNumberish,
      lpRewardDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lpRewardForShares(uint256,uint256)"(
      amount: BigNumberish,
      lpRewardDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "lpRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<string>;

    "manager()"(overrides?: CallOverrides): Promise<string>;

    migrate(overrides?: CallOverrides): Promise<BigNumber>;

    "migrate()"(overrides?: CallOverrides): Promise<BigNumber>;

    migrating(overrides?: CallOverrides): Promise<boolean>;

    "migrating()"(overrides?: CallOverrides): Promise<boolean>;

    migrator(overrides?: CallOverrides): Promise<string>;

    "migrator()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pendingLpRewards(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingLpRewards(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _amount: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLiquidity(uint256,uint256)"(
      _amount: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeProtocolToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeProtocolToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendDust(address,address,uint256)"(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlockCountInAWeek(
      _blockCountInAWeek: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBlockCountInAWeek(uint256)"(
      _blockCountInAWeek: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBondingDiscountMultiplier(
      _bondingDiscountMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBondingDiscountMultiplier(uint256)"(
      _bondingDiscountMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBondingFormulasAddress(
      _bondingFormulasAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBondingFormulasAddress(address)"(
      _bondingFormulasAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMigrating(_migrating: boolean, overrides?: CallOverrides): Promise<void>;

    "setMigrating(bool)"(
      _migrating: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMigrator(_migrator: string, overrides?: CallOverrides): Promise<void>;

    "setMigrator(address)"(
      _migrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    toMigrateId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "toMigrateId(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLpToMigrate(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLpToMigrate()"(overrides?: CallOverrides): Promise<BigNumber>;

    uADPriceReset(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "uADPriceReset(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    AddLiquidityFromBond(
      _user: string | null,
      _id: BigNumberish | null,
      _lpAmount: null,
      _bondingShareAmount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _user: string;
        _id: BigNumber;
        _lpAmount: BigNumber;
        _bondingShareAmount: BigNumber;
      }
    >;

    BlockCountInAWeekUpdated(
      _blockCountInAWeek: null
    ): TypedEventFilter<[BigNumber], { _blockCountInAWeek: BigNumber }>;

    BondingDiscountMultiplierUpdated(
      _bondingDiscountMultiplier: null
    ): TypedEventFilter<[BigNumber], { _bondingDiscountMultiplier: BigNumber }>;

    Deposit(
      _user: string | null,
      _id: BigNumberish | null,
      _lpAmount: null,
      _bondingShareAmount: null,
      _weeks: null,
      _endBlock: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        _user: string;
        _id: BigNumber;
        _lpAmount: BigNumber;
        _bondingShareAmount: BigNumber;
        _weeks: BigNumber;
        _endBlock: BigNumber;
      }
    >;

    DustSent(
      _to: null,
      token: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _to: string; token: string; amount: BigNumber }
    >;

    Migrated(
      _user: string | null,
      _id: BigNumberish | null,
      _lpsAmount: null,
      _sharesAmount: null,
      _weeks: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        _user: string;
        _id: BigNumber;
        _lpsAmount: BigNumber;
        _sharesAmount: BigNumber;
        _weeks: BigNumber;
      }
    >;

    Paused(account: null): TypedEventFilter<[string], { account: string }>;

    PriceReset(
      _tokenWithdrawn: null,
      _amountWithdrawn: null,
      _amountTransfered: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        _tokenWithdrawn: string;
        _amountWithdrawn: BigNumber;
        _amountTransfered: BigNumber;
      }
    >;

    ProtocolTokenAdded(
      _token: null
    ): TypedEventFilter<[string], { _token: string }>;

    ProtocolTokenRemoved(
      _token: null
    ): TypedEventFilter<[string], { _token: string }>;

    RemoveLiquidityFromBond(
      _user: string | null,
      _id: BigNumberish | null,
      _lpAmount: null,
      _lpAmountTransferred: null,
      _lprewards: null,
      _bondingShareAmount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        _user: string;
        _id: BigNumber;
        _lpAmount: BigNumber;
        _lpAmountTransferred: BigNumber;
        _lprewards: BigNumber;
        _bondingShareAmount: BigNumber;
      }
    >;

    Unpaused(account: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "ETH_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    accLpRewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    "accLpRewardPerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      _amount: BigNumberish,
      _id: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addLiquidity(uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _id: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addProtocolToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addProtocolToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addUserToMigrate(
      _original: string,
      _lpBalance: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addUserToMigrate(address,uint256,uint256)"(
      _original: string,
      _lpBalance: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blockCountInAWeek(overrides?: CallOverrides): Promise<BigNumber>;

    "blockCountInAWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

    bondingDiscountMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "bondingDiscountMultiplier()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondingFormulasAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "bondingFormulasAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    crvPriceReset(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "crvPriceReset(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentShareValue(overrides?: CallOverrides): Promise<BigNumber>;

    "currentShareValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    data(overrides?: CallOverrides): Promise<BigNumber>;

    "data()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _lpsAmount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      _lpsAmount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lpRewardForShares(
      amount: BigNumberish,
      lpRewardDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lpRewardForShares(uint256,uint256)"(
      amount: BigNumberish,
      lpRewardDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "lpRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    "manager()"(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "migrate()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrating(overrides?: CallOverrides): Promise<BigNumber>;

    "migrating()"(overrides?: CallOverrides): Promise<BigNumber>;

    migrator(overrides?: CallOverrides): Promise<BigNumber>;

    "migrator()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingLpRewards(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingLpRewards(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _amount: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeLiquidity(uint256,uint256)"(
      _amount: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeProtocolToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeProtocolToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sendDust(address,address,uint256)"(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBlockCountInAWeek(
      _blockCountInAWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBlockCountInAWeek(uint256)"(
      _blockCountInAWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBondingDiscountMultiplier(
      _bondingDiscountMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBondingDiscountMultiplier(uint256)"(
      _bondingDiscountMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBondingFormulasAddress(
      _bondingFormulasAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBondingFormulasAddress(address)"(
      _bondingFormulasAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMigrating(
      _migrating: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMigrating(bool)"(
      _migrating: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMigrator(
      _migrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMigrator(address)"(
      _migrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toMigrateId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "toMigrateId(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLpToMigrate(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLpToMigrate()"(overrides?: CallOverrides): Promise<BigNumber>;

    uADPriceReset(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "uADPriceReset(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ETH_ADDRESS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ONE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accLpRewardPerShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accLpRewardPerShare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      _amount: BigNumberish,
      _id: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addLiquidity(uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _id: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addProtocolToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addProtocolToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addUserToMigrate(
      _original: string,
      _lpBalance: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addUserToMigrate(address,uint256,uint256)"(
      _original: string,
      _lpBalance: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blockCountInAWeek(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "blockCountInAWeek()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondingDiscountMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bondingDiscountMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondingFormulasAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bondingFormulasAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    crvPriceReset(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "crvPriceReset(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentShareValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentShareValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "data()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _lpsAmount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256)"(
      _lpsAmount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lpRewardForShares(
      amount: BigNumberish,
      lpRewardDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lpRewardForShares(uint256,uint256)"(
      amount: BigNumberish,
      lpRewardDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lpRewards()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "manager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "migrate()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrating(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "migrating()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "migrator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingLpRewards(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingLpRewards(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      _amount: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(uint256,uint256)"(
      _amount: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeProtocolToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeProtocolToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sendDust(address,address,uint256)"(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBlockCountInAWeek(
      _blockCountInAWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBlockCountInAWeek(uint256)"(
      _blockCountInAWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBondingDiscountMultiplier(
      _bondingDiscountMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBondingDiscountMultiplier(uint256)"(
      _bondingDiscountMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBondingFormulasAddress(
      _bondingFormulasAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBondingFormulasAddress(address)"(
      _bondingFormulasAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMigrating(
      _migrating: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMigrating(bool)"(
      _migrating: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMigrator(
      _migrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMigrator(address)"(
      _migrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toMigrateId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toMigrateId(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLpToMigrate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalLpToMigrate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uADPriceReset(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "uADPriceReset(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
