/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { ABDKTest } from "../ABDKTest";

export class ABDKTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ABDKTest> {
    return super.deploy(overrides || {}) as Promise<ABDKTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ABDKTest {
    return super.attach(address) as ABDKTest;
  }
  connect(signer: Signer): ABDKTest__factory {
    return super.connect(signer) as ABDKTest__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ABDKTest {
    return new Contract(address, _abi, signerOrProvider) as ABDKTest;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "add",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "max",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506106ce806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631003e2d21461003b5780636ac5db1914610060575b600080fd5b61004e6100493660046106a9565b610068565b60405190815260200160405180910390f35b61004e6100bf565b60006000196100b661009e61007c856100d6565b610085846100d6565b6fffffffffffffffffffffffffffffffff19169061013b565b6fffffffffffffffffffffffffffffffff1916610575565b9150505b919050565b60006000196100d061009e826100d6565b91505090565b6000816100e5575060006100ba565b8160006100f1826105f9565b9050607081101561010a578060700382901b915061011d565b607081111561011d576070810382901c91505b613fff0160701b6001600160701b03919091161760801b90506100ba565b6000617fff60f084811c8216919084901c8116908214156101a25780617fff1415610198576fffffffffffffffffffffffffffffffff19858116908516141561018857849250505061056f565b5061ffff60ef1b915061056f9050565b849250505061056f565b80617fff14156101b657839250505061056f565b6001607f1b608086901c90811015906001600160701b0316836101dc57600193506101e3565b600160701b175b6001607f1b608087901c90811015906001600160701b0316846102095760019450610210565b600160701b175b82610249576fffffffffffffffffffffffffffffffff198816600160ff1b14610239578761023c565b60005b965050505050505061056f565b80610272576fffffffffffffffffffffffffffffffff198916600160ff1b14610239578861023c565b84860384151583151514156103a9576070811315610299578997505050505050505061056f565b60008113156102ab5790811c906102da565b606f198112156102c4578897505050505050505061056f565b60008112156102da578060000384901c93508596505b928101926e0200000000000000000000000000008410610300576001968701969390931c925b86617fff141561034a578461031a57617fff60f01b61033c565b7fffff0000000000000000000000000000000000000000000000000000000000005b97505050505050505061056f565b600160701b84101561035f576000965061036c565b6001600160701b03841693505b83607088901b8661037e576000610384565b6001607f1b5b6fffffffffffffffffffffffffffffffff16171760801b97505050505050505061056f565b60008113156103c457600184901b93506001870396506103db565b60008112156103db57600182901b91506001860396505b60708113156103ed576001915061043a565b600181131561040a576001810360018303901c600101915061043a565b606f1981121561041d576001935061043a565b60001981121561043a576001816000030360018503901c60010193505b81841061044b578184039350610454565b83820393508294505b8361046a57506000965061056f95505050505050565b6000610475856105f9565b9050806071141561049b57600185901c6001600160701b031694506001880197506104ea565b60708110156104dd576070819003808911156104ca578086901b6001600160701b0316955080890398506104d7565b600098600019019590951b945b506104ea565b6001600160701b03851694505b87617fff1415610535578561050457617fff60f01b610526565b7fffff0000000000000000000000000000000000000000000000000000000000005b9850505050505050505061056f565b84607089901b8761054757600061054d565b6001607f1b5b6fffffffffffffffffffffffffffffffff16171760801b985050505050505050505b92915050565b6000617fff60f083901c16613fff8110156105945760009150506100ba565b6001607f1b608084901c106105a857600080fd5b6140fe8111156105b757600080fd5b600160701b6001600160701b03608085901c161761406f8210156105e15761406f8290031c6100b6565b61406f8211156100b65761406e1982011b9392505050565b600080821161060757600080fd5b6000700100000000000000000000000000000000831061062957608092831c92015b68010000000000000000831061064157604092831c92015b640100000000831061065557602092831c92015b62010000831061066757601092831c92015b610100831061067857600892831c92015b6010831061068857600492831c92015b6004831061069857600292831c92015b6002831061056f5760010192915050565b6000602082840312156106ba578081fd5b503591905056fea164736f6c6343000803000a";
