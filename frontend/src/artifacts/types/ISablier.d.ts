/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ISablierInterface extends ethers.utils.Interface {
  functions: {
    "addPauser(address)": FunctionFragment;
    "balanceOf(uint256,address)": FunctionFragment;
    "cTokenManager()": FunctionFragment;
    "cancelStream(uint256)": FunctionFragment;
    "createCompoundingStream(address,uint256,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "createStream(address,uint256,address,uint256,uint256)": FunctionFragment;
    "deltaOf(uint256)": FunctionFragment;
    "fee()": FunctionFragment;
    "getCompoundingStream(uint256)": FunctionFragment;
    "getEarnings(address)": FunctionFragment;
    "getStream(uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "interestOf(uint256,uint256)": FunctionFragment;
    "isCompoundingStream(uint256)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "isPauser(address)": FunctionFragment;
    "nextStreamId()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "takeEarnings(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateFee(uint256)": FunctionFragment;
    "withdrawFromStream(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addPauser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cTokenManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelStream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCompoundingStream",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createStream",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deltaOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCompoundingStream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getEarnings", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getStream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestOf",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isCompoundingStream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isPauser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "nextStreamId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "takeEarnings",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromStream",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addPauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cTokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCompoundingStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deltaOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCompoundingStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStream", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "interestOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCompoundingStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextStreamId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takeEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromStream",
    data: BytesLike
  ): Result;

  events: {
    "CancelStream(uint256,address,address,uint256,uint256)": EventFragment;
    "CreateCompoundingStream(uint256,uint256,uint256,uint256)": EventFragment;
    "CreateStream(uint256,address,address,uint256,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PauserAdded(address)": EventFragment;
    "PauserRemoved(address)": EventFragment;
    "PayInterest(uint256,uint256,uint256,uint256)": EventFragment;
    "TakeEarnings(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UpdateFee(uint256)": EventFragment;
    "WithdrawFromStream(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelStream"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateCompoundingStream"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateStream"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayInterest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeEarnings"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFromStream"): EventFragment;
}

export class ISablier extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISablierInterface;

  functions: {
    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addPauser(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      streamId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    "balanceOf(uint256,address)"(
      streamId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    cTokenManager(overrides?: CallOverrides): Promise<[string]>;

    "cTokenManager()"(overrides?: CallOverrides): Promise<[string]>;

    cancelStream(
      streamId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancelStream(uint256)"(
      streamId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createCompoundingStream(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      senderSharePercentage: BigNumberish,
      recipientSharePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createCompoundingStream(address,uint256,address,uint256,uint256,uint256,uint256)"(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      senderSharePercentage: BigNumberish,
      recipientSharePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createStream(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createStream(address,uint256,address,uint256,uint256)"(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deltaOf(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { delta: BigNumber }>;

    "deltaOf(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { delta: BigNumber }>;

    fee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mantissa: BigNumber }>;

    "fee()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mantissa: BigNumber }>;

    getCompoundingStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        sender: string;
        recipient: string;
        deposit: BigNumber;
        tokenAddress: string;
        startTime: BigNumber;
        stopTime: BigNumber;
        remainingBalance: BigNumber;
        ratePerSecond: BigNumber;
        exchangeRateInitial: BigNumber;
        senderSharePercentage: BigNumber;
        recipientSharePercentage: BigNumber;
      }
    >;

    "getCompoundingStream(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        sender: string;
        recipient: string;
        deposit: BigNumber;
        tokenAddress: string;
        startTime: BigNumber;
        stopTime: BigNumber;
        remainingBalance: BigNumber;
        ratePerSecond: BigNumber;
        exchangeRateInitial: BigNumber;
        senderSharePercentage: BigNumber;
        recipientSharePercentage: BigNumber;
      }
    >;

    getEarnings(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getEarnings(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        sender: string;
        recipient: string;
        deposit: BigNumber;
        tokenAddress: string;
        startTime: BigNumber;
        stopTime: BigNumber;
        remainingBalance: BigNumber;
        ratePerSecond: BigNumber;
      }
    >;

    "getStream(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        sender: string;
        recipient: string;
        deposit: BigNumber;
        tokenAddress: string;
        startTime: BigNumber;
        stopTime: BigNumber;
        remainingBalance: BigNumber;
        ratePerSecond: BigNumber;
      }
    >;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interestOf(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "interestOf(uint256,uint256)"(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isCompoundingStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isCompoundingStream(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    isPauser(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isPauser(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nextStreamId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextStreamId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    takeEarnings(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "takeEarnings(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFee(
      feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateFee(uint256)"(
      feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFromStream(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawFromStream(uint256,uint256)"(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addPauser(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addPauser(address)"(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    streamId: BigNumberish,
    who: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(uint256,address)"(
    streamId: BigNumberish,
    who: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cTokenManager(overrides?: CallOverrides): Promise<string>;

  "cTokenManager()"(overrides?: CallOverrides): Promise<string>;

  cancelStream(
    streamId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancelStream(uint256)"(
    streamId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createCompoundingStream(
    recipient: string,
    deposit: BigNumberish,
    tokenAddress: string,
    startTime: BigNumberish,
    stopTime: BigNumberish,
    senderSharePercentage: BigNumberish,
    recipientSharePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createCompoundingStream(address,uint256,address,uint256,uint256,uint256,uint256)"(
    recipient: string,
    deposit: BigNumberish,
    tokenAddress: string,
    startTime: BigNumberish,
    stopTime: BigNumberish,
    senderSharePercentage: BigNumberish,
    recipientSharePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createStream(
    recipient: string,
    deposit: BigNumberish,
    tokenAddress: string,
    startTime: BigNumberish,
    stopTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createStream(address,uint256,address,uint256,uint256)"(
    recipient: string,
    deposit: BigNumberish,
    tokenAddress: string,
    startTime: BigNumberish,
    stopTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deltaOf(
    streamId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "deltaOf(uint256)"(
    streamId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCompoundingStream(
    streamId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      sender: string;
      recipient: string;
      deposit: BigNumber;
      tokenAddress: string;
      startTime: BigNumber;
      stopTime: BigNumber;
      remainingBalance: BigNumber;
      ratePerSecond: BigNumber;
      exchangeRateInitial: BigNumber;
      senderSharePercentage: BigNumber;
      recipientSharePercentage: BigNumber;
    }
  >;

  "getCompoundingStream(uint256)"(
    streamId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      sender: string;
      recipient: string;
      deposit: BigNumber;
      tokenAddress: string;
      startTime: BigNumber;
      stopTime: BigNumber;
      remainingBalance: BigNumber;
      ratePerSecond: BigNumber;
      exchangeRateInitial: BigNumber;
      senderSharePercentage: BigNumber;
      recipientSharePercentage: BigNumber;
    }
  >;

  getEarnings(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getEarnings(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStream(
    streamId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      sender: string;
      recipient: string;
      deposit: BigNumber;
      tokenAddress: string;
      startTime: BigNumber;
      stopTime: BigNumber;
      remainingBalance: BigNumber;
      ratePerSecond: BigNumber;
    }
  >;

  "getStream(uint256)"(
    streamId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      sender: string;
      recipient: string;
      deposit: BigNumber;
      tokenAddress: string;
      startTime: BigNumber;
      stopTime: BigNumber;
      remainingBalance: BigNumber;
      ratePerSecond: BigNumber;
    }
  >;

  "initialize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interestOf(
    streamId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "interestOf(uint256,uint256)"(
    streamId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isCompoundingStream(
    streamId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isCompoundingStream(uint256)"(
    streamId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

  "isPauser(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nextStreamId(overrides?: CallOverrides): Promise<BigNumber>;

  "nextStreamId()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  takeEarnings(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "takeEarnings(address,uint256)"(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unpause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFee(
    feePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateFee(uint256)"(
    feePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFromStream(
    streamId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawFromStream(uint256,uint256)"(
    streamId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPauser(account: string, overrides?: CallOverrides): Promise<void>;

    "addPauser(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      streamId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(uint256,address)"(
      streamId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cTokenManager(overrides?: CallOverrides): Promise<string>;

    "cTokenManager()"(overrides?: CallOverrides): Promise<string>;

    cancelStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "cancelStream(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createCompoundingStream(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      senderSharePercentage: BigNumberish,
      recipientSharePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createCompoundingStream(address,uint256,address,uint256,uint256,uint256,uint256)"(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      senderSharePercentage: BigNumberish,
      recipientSharePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createStream(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createStream(address,uint256,address,uint256,uint256)"(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deltaOf(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deltaOf(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCompoundingStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        sender: string;
        recipient: string;
        deposit: BigNumber;
        tokenAddress: string;
        startTime: BigNumber;
        stopTime: BigNumber;
        remainingBalance: BigNumber;
        ratePerSecond: BigNumber;
        exchangeRateInitial: BigNumber;
        senderSharePercentage: BigNumber;
        recipientSharePercentage: BigNumber;
      }
    >;

    "getCompoundingStream(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        sender: string;
        recipient: string;
        deposit: BigNumber;
        tokenAddress: string;
        startTime: BigNumber;
        stopTime: BigNumber;
        remainingBalance: BigNumber;
        ratePerSecond: BigNumber;
        exchangeRateInitial: BigNumber;
        senderSharePercentage: BigNumber;
        recipientSharePercentage: BigNumber;
      }
    >;

    getEarnings(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEarnings(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        sender: string;
        recipient: string;
        deposit: BigNumber;
        tokenAddress: string;
        startTime: BigNumber;
        stopTime: BigNumber;
        remainingBalance: BigNumber;
        ratePerSecond: BigNumber;
      }
    >;

    "getStream(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        sender: string;
        recipient: string;
        deposit: BigNumber;
        tokenAddress: string;
        startTime: BigNumber;
        stopTime: BigNumber;
        remainingBalance: BigNumber;
        ratePerSecond: BigNumber;
      }
    >;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      sender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    interestOf(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        senderInterest: BigNumber;
        recipientInterest: BigNumber;
        sablierInterest: BigNumber;
      }
    >;

    "interestOf(uint256,uint256)"(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        senderInterest: BigNumber;
        recipientInterest: BigNumber;
        sablierInterest: BigNumber;
      }
    >;

    isCompoundingStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isCompoundingStream(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

    "isPauser(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nextStreamId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextStreamId()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    takeEarnings(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "takeEarnings(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    updateFee(
      feePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateFee(uint256)"(
      feePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromStream(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "withdrawFromStream(uint256,uint256)"(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    CancelStream(
      streamId: BigNumberish | null,
      sender: string | null,
      recipient: string | null,
      senderBalance: null,
      recipientBalance: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        streamId: BigNumber;
        sender: string;
        recipient: string;
        senderBalance: BigNumber;
        recipientBalance: BigNumber;
      }
    >;

    CreateCompoundingStream(
      streamId: BigNumberish | null,
      exchangeRate: null,
      senderSharePercentage: null,
      recipientSharePercentage: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        streamId: BigNumber;
        exchangeRate: BigNumber;
        senderSharePercentage: BigNumber;
        recipientSharePercentage: BigNumber;
      }
    >;

    CreateStream(
      streamId: BigNumberish | null,
      sender: string | null,
      recipient: string | null,
      deposit: null,
      tokenAddress: null,
      startTime: null,
      stopTime: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, string, BigNumber, BigNumber],
      {
        streamId: BigNumber;
        sender: string;
        recipient: string;
        deposit: BigNumber;
        tokenAddress: string;
        startTime: BigNumber;
        stopTime: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Paused(account: null): TypedEventFilter<[string], { account: string }>;

    PauserAdded(
      account: string | null
    ): TypedEventFilter<[string], { account: string }>;

    PauserRemoved(
      account: string | null
    ): TypedEventFilter<[string], { account: string }>;

    PayInterest(
      streamId: BigNumberish | null,
      senderInterest: null,
      recipientInterest: null,
      sablierInterest: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        streamId: BigNumber;
        senderInterest: BigNumber;
        recipientInterest: BigNumber;
        sablierInterest: BigNumber;
      }
    >;

    TakeEarnings(
      tokenAddress: string | null,
      amount: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { tokenAddress: string; amount: BigNumber }
    >;

    Unpaused(account: null): TypedEventFilter<[string], { account: string }>;

    UpdateFee(
      fee: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    WithdrawFromStream(
      streamId: BigNumberish | null,
      recipient: string | null,
      amount: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { streamId: BigNumber; recipient: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addPauser(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      streamId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(uint256,address)"(
      streamId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cTokenManager(overrides?: CallOverrides): Promise<BigNumber>;

    "cTokenManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    cancelStream(
      streamId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancelStream(uint256)"(
      streamId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createCompoundingStream(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      senderSharePercentage: BigNumberish,
      recipientSharePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createCompoundingStream(address,uint256,address,uint256,uint256,uint256,uint256)"(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      senderSharePercentage: BigNumberish,
      recipientSharePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createStream(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createStream(address,uint256,address,uint256,uint256)"(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deltaOf(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deltaOf(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCompoundingStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCompoundingStream(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEarnings(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEarnings(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStream(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address)"(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interestOf(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "interestOf(uint256,uint256)"(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isCompoundingStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isCompoundingStream(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPauser(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isPauser(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextStreamId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextStreamId()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    takeEarnings(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "takeEarnings(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFee(
      feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateFee(uint256)"(
      feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFromStream(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawFromStream(uint256,uint256)"(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addPauser(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      streamId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(uint256,address)"(
      streamId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cTokenManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cTokenManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelStream(
      streamId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancelStream(uint256)"(
      streamId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createCompoundingStream(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      senderSharePercentage: BigNumberish,
      recipientSharePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createCompoundingStream(address,uint256,address,uint256,uint256,uint256,uint256)"(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      senderSharePercentage: BigNumberish,
      recipientSharePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createStream(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createStream(address,uint256,address,uint256,uint256)"(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deltaOf(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deltaOf(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCompoundingStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCompoundingStream(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEarnings(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEarnings(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStream(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interestOf(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "interestOf(uint256,uint256)"(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isCompoundingStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isCompoundingStream(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPauser(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPauser(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextStreamId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextStreamId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takeEarnings(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "takeEarnings(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFee(
      feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateFee(uint256)"(
      feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromStream(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFromStream(uint256,uint256)"(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
