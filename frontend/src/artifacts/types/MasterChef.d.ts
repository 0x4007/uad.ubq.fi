/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MasterChefInterface extends ethers.utils.Interface {
  functions: {
    "deposit(uint256,address)": FunctionFragment;
    "getRewards()": FunctionFragment;
    "lastPrice()": FunctionFragment;
    "manager()": FunctionFragment;
    "minPriceDiffToUpdateMultiplier()": FunctionFragment;
    "pendingUGOV(address)": FunctionFragment;
    "pool()": FunctionFragment;
    "setMinPriceDiffToUpdateMultiplier(uint256)": FunctionFragment;
    "setUGOVPerBlock(uint256)": FunctionFragment;
    "uGOVPerBlock()": FunctionFragment;
    "uGOVmultiplier()": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lastPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minPriceDiffToUpdateMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pendingUGOV", values: [string]): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMinPriceDiffToUpdateMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUGOVPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uGOVPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uGOVmultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minPriceDiffToUpdateMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingUGOV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinPriceDiffToUpdateMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUGOVPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uGOVPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uGOVmultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class MasterChef extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MasterChefInterface;

  functions: {
    deposit(
      _amount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,address)"(
      _amount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    "manager()"(overrides?: CallOverrides): Promise<[string]>;

    minPriceDiffToUpdateMultiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "minPriceDiffToUpdateMultiplier()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingUGOV(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "pendingUGOV(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        lastRewardBlock: BigNumber;
        accuGOVPerShare: BigNumber;
      }
    >;

    "pool()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        lastRewardBlock: BigNumber;
        accuGOVPerShare: BigNumber;
      }
    >;

    setMinPriceDiffToUpdateMultiplier(
      _minPriceDiffToUpdateMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinPriceDiffToUpdateMultiplier(uint256)"(
      _minPriceDiffToUpdateMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUGOVPerBlock(
      _uGOVPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setUGOVPerBlock(uint256)"(
      _uGOVPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uGOVPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "uGOVPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    uGOVmultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "uGOVmultiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(
      _amount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address)"(
      _amount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deposit(
    _amount: BigNumberish,
    sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,address)"(
    _amount: BigNumberish,
    sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getRewards()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "lastPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  manager(overrides?: CallOverrides): Promise<string>;

  "manager()"(overrides?: CallOverrides): Promise<string>;

  minPriceDiffToUpdateMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "minPriceDiffToUpdateMultiplier()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingUGOV(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "pendingUGOV(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pool(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      lastRewardBlock: BigNumber;
      accuGOVPerShare: BigNumber;
    }
  >;

  "pool()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      lastRewardBlock: BigNumber;
      accuGOVPerShare: BigNumber;
    }
  >;

  setMinPriceDiffToUpdateMultiplier(
    _minPriceDiffToUpdateMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinPriceDiffToUpdateMultiplier(uint256)"(
    _minPriceDiffToUpdateMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUGOVPerBlock(
    _uGOVPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setUGOVPerBlock(uint256)"(
    _uGOVPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uGOVPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "uGOVPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  uGOVmultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "uGOVmultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  "userInfo(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  withdraw(
    _amount: BigNumberish,
    sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address)"(
    _amount: BigNumberish,
    sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      _amount: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,address)"(
      _amount: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "lastPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<string>;

    "manager()"(overrides?: CallOverrides): Promise<string>;

    minPriceDiffToUpdateMultiplier(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minPriceDiffToUpdateMultiplier()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingUGOV(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "pendingUGOV(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        lastRewardBlock: BigNumber;
        accuGOVPerShare: BigNumber;
      }
    >;

    "pool()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        lastRewardBlock: BigNumber;
        accuGOVPerShare: BigNumber;
      }
    >;

    setMinPriceDiffToUpdateMultiplier(
      _minPriceDiffToUpdateMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinPriceDiffToUpdateMultiplier(uint256)"(
      _minPriceDiffToUpdateMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUGOVPerBlock(
      _uGOVPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUGOVPerBlock(uint256)"(
      _uGOVPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    uGOVPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "uGOVPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    uGOVmultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "uGOVmultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(
      _amount: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,address)"(
      _amount: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposit(
      user: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Withdraw(
      user: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    deposit(
      _amount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,address)"(
      _amount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "lastPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    "manager()"(overrides?: CallOverrides): Promise<BigNumber>;

    minPriceDiffToUpdateMultiplier(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minPriceDiffToUpdateMultiplier()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingUGOV(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "pendingUGOV(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    "pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    setMinPriceDiffToUpdateMultiplier(
      _minPriceDiffToUpdateMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinPriceDiffToUpdateMultiplier(uint256)"(
      _minPriceDiffToUpdateMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUGOVPerBlock(
      _uGOVPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setUGOVPerBlock(uint256)"(
      _uGOVPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uGOVPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "uGOVPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    uGOVmultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "uGOVmultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256,address)"(
      _amount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      _amount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address)"(
      _amount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "manager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPriceDiffToUpdateMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minPriceDiffToUpdateMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingUGOV(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingUGOV(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMinPriceDiffToUpdateMultiplier(
      _minPriceDiffToUpdateMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinPriceDiffToUpdateMultiplier(uint256)"(
      _minPriceDiffToUpdateMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUGOVPerBlock(
      _uGOVPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setUGOVPerBlock(uint256)"(
      _uGOVPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uGOVPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uGOVPerBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uGOVmultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uGOVmultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address)"(
      _amount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
