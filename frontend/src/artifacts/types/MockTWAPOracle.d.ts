/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MockTWAPOracleInterface extends ethers.utils.Interface {
  functions: {
    "consult(address)": FunctionFragment;
    "pool()": FunctionFragment;
    "price0Average()": FunctionFragment;
    "price1Average()": FunctionFragment;
    "priceCumulativeLast(uint256)": FunctionFragment;
    "pricesBlockTimestampLast()": FunctionFragment;
    "token0()": FunctionFragment;
    "token1()": FunctionFragment;
    "update()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "consult", values: [string]): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "price0Average",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "price1Average",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceCumulativeLast",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pricesBlockTimestampLast",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(functionFragment: "update", values?: undefined): string;

  decodeFunctionResult(functionFragment: "consult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "price0Average",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "price1Average",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceCumulativeLast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricesBlockTimestampLast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {};
}

export class MockTWAPOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockTWAPOracleInterface;

  functions: {
    consult(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    "consult(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    "pool()"(overrides?: CallOverrides): Promise<[string]>;

    price0Average(overrides?: CallOverrides): Promise<[BigNumber]>;

    "price0Average()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    price1Average(overrides?: CallOverrides): Promise<[BigNumber]>;

    "price1Average()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceCumulativeLast(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "priceCumulativeLast(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pricesBlockTimestampLast(overrides?: CallOverrides): Promise<[BigNumber]>;

    "pricesBlockTimestampLast()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    token0(overrides?: CallOverrides): Promise<[string]>;

    "token0()"(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    "token1()"(overrides?: CallOverrides): Promise<[string]>;

    update(overrides?: CallOverrides): Promise<[void]>;

    "update()"(overrides?: CallOverrides): Promise<[void]>;
  };

  consult(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "consult(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pool(overrides?: CallOverrides): Promise<string>;

  "pool()"(overrides?: CallOverrides): Promise<string>;

  price0Average(overrides?: CallOverrides): Promise<BigNumber>;

  "price0Average()"(overrides?: CallOverrides): Promise<BigNumber>;

  price1Average(overrides?: CallOverrides): Promise<BigNumber>;

  "price1Average()"(overrides?: CallOverrides): Promise<BigNumber>;

  priceCumulativeLast(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "priceCumulativeLast(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pricesBlockTimestampLast(overrides?: CallOverrides): Promise<BigNumber>;

  "pricesBlockTimestampLast()"(overrides?: CallOverrides): Promise<BigNumber>;

  token0(overrides?: CallOverrides): Promise<string>;

  "token0()"(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  "token1()"(overrides?: CallOverrides): Promise<string>;

  update(overrides?: CallOverrides): Promise<void>;

  "update()"(overrides?: CallOverrides): Promise<void>;

  callStatic: {
    consult(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "consult(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<string>;

    "pool()"(overrides?: CallOverrides): Promise<string>;

    price0Average(overrides?: CallOverrides): Promise<BigNumber>;

    "price0Average()"(overrides?: CallOverrides): Promise<BigNumber>;

    price1Average(overrides?: CallOverrides): Promise<BigNumber>;

    "price1Average()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceCumulativeLast(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceCumulativeLast(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricesBlockTimestampLast(overrides?: CallOverrides): Promise<BigNumber>;

    "pricesBlockTimestampLast()"(overrides?: CallOverrides): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<string>;

    "token0()"(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    "token1()"(overrides?: CallOverrides): Promise<string>;

    update(overrides?: CallOverrides): Promise<void>;

    "update()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    consult(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "consult(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    "pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    price0Average(overrides?: CallOverrides): Promise<BigNumber>;

    "price0Average()"(overrides?: CallOverrides): Promise<BigNumber>;

    price1Average(overrides?: CallOverrides): Promise<BigNumber>;

    "price1Average()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceCumulativeLast(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceCumulativeLast(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricesBlockTimestampLast(overrides?: CallOverrides): Promise<BigNumber>;

    "pricesBlockTimestampLast()"(overrides?: CallOverrides): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    "token0()"(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    "token1()"(overrides?: CallOverrides): Promise<BigNumber>;

    update(overrides?: CallOverrides): Promise<BigNumber>;

    "update()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    consult(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "consult(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price0Average(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "price0Average()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price1Average(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "price1Average()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceCumulativeLast(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceCumulativeLast(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pricesBlockTimestampLast(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pricesBlockTimestampLast()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token0()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token1()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    update(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "update()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
