/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BondingInterface extends ethers.utils.Interface {
  functions: {
    "ETH_ADDRESS()": FunctionFragment;
    "ONE()": FunctionFragment;
    "addProtocolToken(address)": FunctionFragment;
    "blockCountInAWeek()": FunctionFragment;
    "blockRonding()": FunctionFragment;
    "bondingDiscountMultiplier()": FunctionFragment;
    "currentShareValue()": FunctionFragment;
    "currentTokenPrice()": FunctionFragment;
    "data()": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "manager()": FunctionFragment;
    "priceReset(uint256)": FunctionFragment;
    "redeemStreamTime()": FunctionFragment;
    "removeProtocolToken(address)": FunctionFragment;
    "sablier()": FunctionFragment;
    "sendDust(address,address,uint256)": FunctionFragment;
    "setBlockCountInAWeek(uint256)": FunctionFragment;
    "setBlockRonding(uint256)": FunctionFragment;
    "setBondingDiscountMultiplier(uint256)": FunctionFragment;
    "setRedeemStreamTime(uint256)": FunctionFragment;
    "setSablier(address)": FunctionFragment;
    "setUGOVPerBlock(uint256)": FunctionFragment;
    "uGOVPerBlock()": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addProtocolToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "blockCountInAWeek",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockRonding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondingDiscountMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentShareValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceReset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemStreamTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeProtocolToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "sablier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendDust",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockCountInAWeek",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockRonding",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondingDiscountMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedeemStreamTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setSablier", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setUGOVPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uGOVPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addProtocolToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockCountInAWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockRonding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingDiscountMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentShareValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceReset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemStreamTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProtocolToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sablier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendDust", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBlockCountInAWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlockRonding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondingDiscountMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedeemStreamTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSablier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUGOVPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uGOVPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BlockCountInAWeekUpdated(uint256)": EventFragment;
    "BlockRondingUpdated(uint256)": EventFragment;
    "BondingDiscountMultiplierUpdated(uint256)": EventFragment;
    "DustSent(address,address,uint256)": EventFragment;
    "MaxBondingPriceUpdated(uint256)": EventFragment;
    "ProtocolTokenAdded(address)": EventFragment;
    "ProtocolTokenRemoved(address)": EventFragment;
    "RedeemStreamTimeUpdated(uint256)": EventFragment;
    "SablierUpdated(address)": EventFragment;
    "UGOVPerBlockUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlockCountInAWeekUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockRondingUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BondingDiscountMultiplierUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DustSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxBondingPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolTokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolTokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemStreamTimeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SablierUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UGOVPerBlockUpdated"): EventFragment;
}

export class Bonding extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BondingInterface;

  functions: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    "ETH_ADDRESS()"(overrides?: CallOverrides): Promise<[string]>;

    ONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ONE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addProtocolToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addProtocolToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blockCountInAWeek(overrides?: CallOverrides): Promise<[BigNumber]>;

    "blockCountInAWeek()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    blockRonding(overrides?: CallOverrides): Promise<[BigNumber]>;

    "blockRonding()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    bondingDiscountMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "bondingDiscountMultiplier()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentShareValue(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { priceShare: BigNumber }>;

    "currentShareValue()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { priceShare: BigNumber }>;

    currentTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentTokenPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    data(overrides?: CallOverrides): Promise<[string]>;

    "data()"(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _lpsAmount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256)"(
      _lpsAmount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    "manager()"(overrides?: CallOverrides): Promise<[string]>;

    priceReset(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "priceReset(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemStreamTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "redeemStreamTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeProtocolToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeProtocolToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sablier(overrides?: CallOverrides): Promise<[string]>;

    "sablier()"(overrides?: CallOverrides): Promise<[string]>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sendDust(address,address,uint256)"(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBlockCountInAWeek(
      _blockCountInAWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBlockCountInAWeek(uint256)"(
      _blockCountInAWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBlockRonding(
      _blockRonding: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBlockRonding(uint256)"(
      _blockRonding: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBondingDiscountMultiplier(
      _bondingDiscountMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBondingDiscountMultiplier(uint256)"(
      _bondingDiscountMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRedeemStreamTime(
      _redeemStreamTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRedeemStreamTime(uint256)"(
      _redeemStreamTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSablier(
      _sablier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSablier(address)"(
      _sablier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUGOVPerBlock(
      _uGOVPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setUGOVPerBlock(uint256)"(
      _uGOVPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uGOVPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "uGOVPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _sharesAmount: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      _sharesAmount: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

  "ETH_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

  ONE(overrides?: CallOverrides): Promise<BigNumber>;

  "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

  addProtocolToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addProtocolToken(address)"(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blockCountInAWeek(overrides?: CallOverrides): Promise<BigNumber>;

  "blockCountInAWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

  blockRonding(overrides?: CallOverrides): Promise<BigNumber>;

  "blockRonding()"(overrides?: CallOverrides): Promise<BigNumber>;

  bondingDiscountMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "bondingDiscountMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  currentShareValue(overrides?: CallOverrides): Promise<BigNumber>;

  "currentShareValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  currentTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "currentTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  data(overrides?: CallOverrides): Promise<string>;

  "data()"(overrides?: CallOverrides): Promise<string>;

  deposit(
    _lpsAmount: BigNumberish,
    _weeks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256)"(
    _lpsAmount: BigNumberish,
    _weeks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  manager(overrides?: CallOverrides): Promise<string>;

  "manager()"(overrides?: CallOverrides): Promise<string>;

  priceReset(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "priceReset(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemStreamTime(overrides?: CallOverrides): Promise<BigNumber>;

  "redeemStreamTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  removeProtocolToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeProtocolToken(address)"(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sablier(overrides?: CallOverrides): Promise<string>;

  "sablier()"(overrides?: CallOverrides): Promise<string>;

  sendDust(
    _to: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sendDust(address,address,uint256)"(
    _to: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBlockCountInAWeek(
    _blockCountInAWeek: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBlockCountInAWeek(uint256)"(
    _blockCountInAWeek: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBlockRonding(
    _blockRonding: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBlockRonding(uint256)"(
    _blockRonding: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBondingDiscountMultiplier(
    _bondingDiscountMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBondingDiscountMultiplier(uint256)"(
    _bondingDiscountMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRedeemStreamTime(
    _redeemStreamTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRedeemStreamTime(uint256)"(
    _redeemStreamTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSablier(
    _sablier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSablier(address)"(
    _sablier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUGOVPerBlock(
    _uGOVPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setUGOVPerBlock(uint256)"(
    _uGOVPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uGOVPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "uGOVPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _sharesAmount: BigNumberish,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    _sharesAmount: BigNumberish,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

    "ETH_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    addProtocolToken(_token: string, overrides?: CallOverrides): Promise<void>;

    "addProtocolToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    blockCountInAWeek(overrides?: CallOverrides): Promise<BigNumber>;

    "blockCountInAWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

    blockRonding(overrides?: CallOverrides): Promise<BigNumber>;

    "blockRonding()"(overrides?: CallOverrides): Promise<BigNumber>;

    bondingDiscountMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "bondingDiscountMultiplier()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentShareValue(overrides?: CallOverrides): Promise<BigNumber>;

    "currentShareValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "currentTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    data(overrides?: CallOverrides): Promise<string>;

    "data()"(overrides?: CallOverrides): Promise<string>;

    deposit(
      _lpsAmount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      _lpsAmount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<string>;

    "manager()"(overrides?: CallOverrides): Promise<string>;

    priceReset(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "priceReset(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemStreamTime(overrides?: CallOverrides): Promise<BigNumber>;

    "redeemStreamTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeProtocolToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeProtocolToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sablier(overrides?: CallOverrides): Promise<string>;

    "sablier()"(overrides?: CallOverrides): Promise<string>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendDust(address,address,uint256)"(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlockCountInAWeek(
      _blockCountInAWeek: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBlockCountInAWeek(uint256)"(
      _blockCountInAWeek: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlockRonding(
      _blockRonding: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBlockRonding(uint256)"(
      _blockRonding: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBondingDiscountMultiplier(
      _bondingDiscountMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBondingDiscountMultiplier(uint256)"(
      _bondingDiscountMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedeemStreamTime(
      _redeemStreamTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRedeemStreamTime(uint256)"(
      _redeemStreamTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSablier(_sablier: string, overrides?: CallOverrides): Promise<void>;

    "setSablier(address)"(
      _sablier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUGOVPerBlock(
      _uGOVPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUGOVPerBlock(uint256)"(
      _uGOVPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    uGOVPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "uGOVPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _sharesAmount: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256)"(
      _sharesAmount: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BlockCountInAWeekUpdated(
      _blockCountInAWeek: null
    ): TypedEventFilter<[BigNumber], { _blockCountInAWeek: BigNumber }>;

    BlockRondingUpdated(
      _blockRonding: null
    ): TypedEventFilter<[BigNumber], { _blockRonding: BigNumber }>;

    BondingDiscountMultiplierUpdated(
      _bondingDiscountMultiplier: null
    ): TypedEventFilter<[BigNumber], { _bondingDiscountMultiplier: BigNumber }>;

    DustSent(
      _to: null,
      token: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _to: string; token: string; amount: BigNumber }
    >;

    MaxBondingPriceUpdated(
      _maxBondingPrice: null
    ): TypedEventFilter<[BigNumber], { _maxBondingPrice: BigNumber }>;

    ProtocolTokenAdded(
      _token: null
    ): TypedEventFilter<[string], { _token: string }>;

    ProtocolTokenRemoved(
      _token: null
    ): TypedEventFilter<[string], { _token: string }>;

    RedeemStreamTimeUpdated(
      _redeemStreamTime: null
    ): TypedEventFilter<[BigNumber], { _redeemStreamTime: BigNumber }>;

    SablierUpdated(
      _sablier: null
    ): TypedEventFilter<[string], { _sablier: string }>;

    UGOVPerBlockUpdated(
      _uGOVPerBlock: null
    ): TypedEventFilter<[BigNumber], { _uGOVPerBlock: BigNumber }>;
  };

  estimateGas: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "ETH_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    addProtocolToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addProtocolToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blockCountInAWeek(overrides?: CallOverrides): Promise<BigNumber>;

    "blockCountInAWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

    blockRonding(overrides?: CallOverrides): Promise<BigNumber>;

    "blockRonding()"(overrides?: CallOverrides): Promise<BigNumber>;

    bondingDiscountMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "bondingDiscountMultiplier()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentShareValue(overrides?: CallOverrides): Promise<BigNumber>;

    "currentShareValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "currentTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    data(overrides?: CallOverrides): Promise<BigNumber>;

    "data()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _lpsAmount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      _lpsAmount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    "manager()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceReset(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "priceReset(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemStreamTime(overrides?: CallOverrides): Promise<BigNumber>;

    "redeemStreamTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeProtocolToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeProtocolToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sablier(overrides?: CallOverrides): Promise<BigNumber>;

    "sablier()"(overrides?: CallOverrides): Promise<BigNumber>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sendDust(address,address,uint256)"(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBlockCountInAWeek(
      _blockCountInAWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBlockCountInAWeek(uint256)"(
      _blockCountInAWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBlockRonding(
      _blockRonding: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBlockRonding(uint256)"(
      _blockRonding: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBondingDiscountMultiplier(
      _bondingDiscountMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBondingDiscountMultiplier(uint256)"(
      _bondingDiscountMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRedeemStreamTime(
      _redeemStreamTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRedeemStreamTime(uint256)"(
      _redeemStreamTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSablier(
      _sablier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSablier(address)"(
      _sablier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUGOVPerBlock(
      _uGOVPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setUGOVPerBlock(uint256)"(
      _uGOVPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uGOVPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "uGOVPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _sharesAmount: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      _sharesAmount: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ETH_ADDRESS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ONE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addProtocolToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addProtocolToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blockCountInAWeek(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "blockCountInAWeek()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockRonding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "blockRonding()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondingDiscountMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bondingDiscountMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentShareValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentShareValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentTokenPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "data()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _lpsAmount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256)"(
      _lpsAmount: BigNumberish,
      _weeks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "manager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceReset(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "priceReset(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemStreamTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "redeemStreamTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeProtocolToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeProtocolToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sablier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sablier()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sendDust(address,address,uint256)"(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBlockCountInAWeek(
      _blockCountInAWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBlockCountInAWeek(uint256)"(
      _blockCountInAWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBlockRonding(
      _blockRonding: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBlockRonding(uint256)"(
      _blockRonding: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBondingDiscountMultiplier(
      _bondingDiscountMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBondingDiscountMultiplier(uint256)"(
      _bondingDiscountMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRedeemStreamTime(
      _redeemStreamTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRedeemStreamTime(uint256)"(
      _redeemStreamTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSablier(
      _sablier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSablier(address)"(
      _sablier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUGOVPerBlock(
      _uGOVPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setUGOVPerBlock(uint256)"(
      _uGOVPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uGOVPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uGOVPerBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _sharesAmount: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      _sharesAmount: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
